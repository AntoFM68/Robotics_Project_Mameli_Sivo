<launch>
    
    <!-- Robot model: uv - drug - drug1 -->
    <arg name="robot" default="uv"/>
    <!-- Robot pose -->
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0.15"/>
    <arg name="Y" default="3.14"/>
    <!-- map -->
    <arg name="map_file" default="$(find robotics)/map/map.yaml"/>

    <!-- Map server -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)">
        <param name="frame_id" value="map"/>
    </node>

    <param name="/use_sim_time" value="true"/>

    <!-- Include world launch -->
    <include file="$(find robotics)/launch/gazebo/world.launch"/>

    <!-- Include robot launch -->
    <include file="$(find robotics)/launch/gazebo/robot.launch">
        <arg name="robot" value="$(arg robot)" />
        <arg name="x" value="$(arg x)" />
        <arg name="y" value="$(arg y)" />
        <arg name="z" value="$(arg z)" />
        <arg name="Y" value="$(arg Y)" />
    </include>
    
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam command="load" file="$(find robotics)/config/$(arg robot)_robot.yaml" />

    <!-- load the controllers in Gazebo -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
        args="joint_state_controller
            diffdrive_controller"/>

    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher_slam">
        <param name="use_gui" value="False"/>
        <param name="publish_frequency" type="double" value="30.0" />
    </node>  

    <!--Publish robot state and transforms-->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher_nav">
        <param name="publish_frequency" type="double" value="30.0" />
    </node>     

    <!-- AMCL -->
    <node pkg="amcl" type="amcl" name="amcl">
        <param name="initial_pose_x" value="$(eval -1*arg('x'))"/>
        <param name="initial_pose_y" value="$(eval -1*arg('y'))"/>
        <param name="initial_pose_a"  value="$(eval 3.14+arg('Y'))"/>
        <param name="base_frame_id" value="$(arg robot)_base_footprint"/>
        <param name="odom_frame_id" value="$(arg robot)_odom"/>
        <rosparam command="load" file="$(find robotics)/config/navigation.yaml" />
        <remap from="/scan" to="/$(arg robot)/hokuyo_sensor/scan"/>
    </node>
    
    <!-- move_base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find robotics)/params/costmap_common_params_$(arg robot).yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find robotics)/params/costmap_common_params_$(arg robot).yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find robotics)/params/local_costmap_params_$(arg robot).yaml" command="load" />
        <rosparam file="$(find robotics)/params/global_costmap_params_$(arg robot).yaml" command="load" />
        <rosparam file="$(find robotics)/params/move_base_params.yaml" command="load" />
        <rosparam file="$(find robotics)/params/dwa_local_planner_params.yaml" command="load" />
        <remap from="/odom" to="/diffdrive_controller/odom"/>
        <remap from="/cmd_vel" to="/diffdrive_controller/cmd_vel"/>
    </node>   

    <!--Launch rviz-->
    <node pkg="rviz" type="rviz" name="rviz"
        args="-d $(find robotics)/rviz/$(arg robot)_navigation.rviz">
    </node> 

</launch>